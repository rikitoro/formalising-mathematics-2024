/-
Copyright (c) 2023 Kevin Buzzard. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author : Kevin Buzzard
-/
import Mathlib.Tactic.Default
import RingTheory.PrincipalIdealDomain
import Data.Polynomial.FieldDivision


-- theory of PIDs
-- theory of PIDs
-- polynomial rings over a field are PIDs
-- polynomial rings over a field are PIDs
/-

# Principal Ideal Domains

First let's showcase what mathlib has.

Let `R` be a commutative ring.
-/
/-

# Principal Ideal Domains

First let's showcase what mathlib has.

Let `R` be a commutative ring.
-/
variable (R : Type) [CommRing R]

-- We say `R` is a *principal ideal ring* if all ideals are principal.
-- We say `R` is a *domain* if it's an integral domain. 
-- We say `R` is a *principal ideal domain* if it's both.
-- So here's how to say "Assume `R` is a PID":
variable [IsPrincipalIdealRing R] [IsDomain R]

-- Note that both of these are typeclasses, so various things should
-- be automatic.
example : ∀ a b : R, a * b = 0 → a = 0 ∨ b = 0 :=
  by
  intro a b
  apply eq_zero_or_eq_zero_of_mul_eq_zero

-- typeclass inference 
-- magically extracts the assumption from `is_domain`
example : (0 : R) ≠ 1 :=
  by-- this is another consequence of being an integral domain
  apply zero_ne_one

example (I : Ideal R) : I.IsPrincipal :=
  -- typeclass inference system finds `is_principal_ideal_ring` and
    -- uses it automatically
    IsPrincipalIdealRing.principal
    I

example (I : Ideal R) : ∃ j, I = Ideal.span {j} :=
  by
  -- to make a term of type `is_principal I` you need to give one proof,
  -- but we still need to do `cases` or equivalent (I used `obtain` below)
  -- to get this proof out.
  obtain ⟨h⟩ := IsPrincipalIdealRing.principal I
  exact h

-- Typeclass inference knows a bunch of theorems about PIDs and which things are PIDs.
-- Examples:
-- integers are a PID
example : IsPrincipalIdealRing ℤ :=
  EuclideanDomain.to_principal_ideal_domain

-- just check the domain bit:
example : IsDomain ℤ := by infer_instance

-- a field is a PID
example (k : Type) [Field k] : IsPrincipalIdealRing k := by infer_instance

example (k : Type) [Field k] : IsDomain k := by infer_instance

open scoped Polynomial

-- to get `k[X]` notation instead of `polynomial k`
-- polys over a field are a PID
example (k : Type) [Field k] : IsPrincipalIdealRing k[X] := by infer_instance

example (k : Type) [Field k] : IsDomain k[X] := by infer_instance

-- if all ideals of a ring are principal then the ring is a principal ideal ring
example (A : Type) [CommRing A] (h : ∀ I : Ideal A, I.IsPrincipal) : IsPrincipalIdealRing A :=
  { principal := h }

-- see if you can prove that the ideal generated by 4 and 6 in any commutative ring is principal.
example (A : Type) [CommRing A] : (Ideal.span ({4, 6} : Set A)).IsPrincipal := by sorry

-- product of two PIDs isn't a PID, but only becuase it's not a domain
example (A B : Type) [CommRing A] [CommRing B] [IsPrincipalIdealRing A] [IsPrincipalIdealRing B] :
    IsPrincipalIdealRing (A × B) :=
  { principal := by sorry }

